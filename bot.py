import streamlit as st
import openai
import json
from openai import OpenAIError, RateLimitError, AuthenticationError
from dotenv import load_dotenv
import os
load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–ª—é—á –¥—ñ–π—Å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è
if not openai_api_key:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ OPENAI_API_KEY —É .env —Ñ–∞–π–ª—ñ!")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ ---
with open('courses.json', encoding='utf-8') as f:
    courses = json.load(f)

# --- –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ---
categories = {
    "IT": ["AI", "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "–ö—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞", "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è", "Web-—Ä–æ–∑—Ä–æ–±–∫–∞"],
    "–ì—É–º–∞–Ω—ñ—Ç–∞—Ä–Ω—ñ": ["–°—É—Å–ø—ñ–ª—å–Ω—ñ –Ω–∞—É–∫–∏", "–†–æ–∑–≤–∏—Ç–æ–∫ –º–∏—Å–ª–µ–Ω–Ω—è", "–í–∏–≤—á–µ–Ω–Ω—è –º–æ–≤–∏", "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è"],
    "–ë—ñ–∑–Ω–µ—Å": ["–§—ñ–Ω–∞–Ω—Å–∏", "–ü—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–æ", "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"],
    "–°–æ—Ü—ñ–∞–ª—å–Ω—ñ": ["–ì—Ä–æ–º–∞–¥—Å—å–∫–µ —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤–æ", "–ú–µ–Ω—Ç–∞–ª—å–Ω–µ –∑–¥–æ—Ä–æ–≤ º—è —Ç–∞ –±–µ–∑–ø–µ–∫–∞", "–ü–æ–¥–æ–ª–∞–Ω–Ω—è –≤–ø–ª–∏–≤—É –≤—ñ–π–Ω–∏"],
    "–û—Å–≤—ñ—Ç–Ω—ñ": ["–î–ª—è –æ—Å–≤—ñ—Ç—è–Ω", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ó–ù–û/–ú–ù–¢", "–Ü–Ω–∫–ª—é–∑–∏–≤–Ω–∞ –æ—Å–≤—ñ—Ç–∞"],
    "–ì—Ä–æ–º–∞–¥—Å—å–∫–∞/–ø—É–±–ª—ñ—á–Ω–∞ —Å—Ñ–µ—Ä–∞": ["–î–µ—Ä–∂—Å–ª—É–∂–±–∞", "–í—ñ–π—Å—å–∫–æ–≤–∞ —Å–ª—É–∂–±–∞", "–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó —É —Å—Ñ–µ—Ä—ñ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"],
    "–¢–≤–æ—Ä—á—ñ": ["–î–∏–∑–∞–π–Ω", "–ú—É–∑–∏–∫–∞", "–§–æ—Ç–æ/–≤—ñ–¥–µ–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ"]
}

# --- –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ –ø–∏—Ç–∞–Ω—å ---
answers = {
    "goal": ["–ù–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è", "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è", "–ü–µ—Ä–µ–∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è"],
    "field": list(categories.keys()),
    "basic_knowledge": ["–ü–æ—á–∏–Ω–∞—é –∑ –Ω—É–ª—è", "–ú–∞—é –±–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è"],
    "level": ["–ü–æ—á–∞—Ç–∫–æ–≤–∏–π", "–°–µ—Ä–µ–¥–Ω—ñ–π", "–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π"],
    "material_format": ["–í—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó –∑ –≤–∏–∫–ª–∞–¥–∞—á–µ–º", "–°–∞–º–æ—Å—Ç—ñ–π–Ω–µ —á–∏—Ç–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É", "–ó–º—ñ—à–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç (–≤—ñ–¥–µ–æ + —Ç–µ–∫—Å—Ç)", "–ù–µ–º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è"],
    "time_per_week": ["–¥–æ 2 –≥–æ–¥–∏–Ω", "2-5 –≥–æ–¥–∏–Ω", "–ø–æ–Ω–∞–¥ 5 –≥–æ–¥–∏–Ω", "—â–µ –Ω–µ –∑–Ω–∞—é"],
    "course_duration": ["–∫–æ—Ä–æ—Ç–∫—ñ –∫—É—Ä—Å–∏ (1‚Äì2 —Ç–∏–∂–Ω—ñ)", "—Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ (3‚Äì6 —Ç–∏–∂–Ω—ñ–≤)", "–¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ (2+ –º—ñ—Å—è—Ü—ñ)", "–Ω–µ–º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è"],
    "teaching_approach": ["–ë—ñ–ª—å—à–µ —Ç–µ–æ—Ä—ñ—ó, –ø–æ—è—Å–Ω–µ–Ω—å —ñ –∫–æ–Ω—Ü–µ–ø—Ç—ñ–≤", "–ü–µ—Ä–µ–≤–∞–∂–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫–∞ —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è", "–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥", "–í—Å–µ –æ–¥–Ω–æ"],
    "certificate": ["–¢–∞–∫", "–ù—ñ", "–ù–µ–≤–∞–∂–ª–∏–≤–æ"],
    "paid_courses": ["–¢–∞–∫", "–ù—ñ"]
}

# --- –°–µ—Å—ñ–π–Ω–∏–π —Å—Ç–∞–Ω ---
if "step" not in st.session_state:
    st.session_state.step = 0
if "data" not in st.session_state:
    st.session_state.data = {}

# --- –ö–Ω–æ–ø–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è ---
if st.button("üîÑ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É"):
    st.session_state.step = 0
    st.session_state.data = {}
    st.rerun()

# --- –í–∏–≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
def show_user_message(msg):
    st.markdown(
        f'<div style="text-align: right; background-color:#DCF8C6; padding:8px; '
        f'border-radius:10px; margin:5px 0;">{msg}</div>',
        unsafe_allow_html=True
    )

def show_bot_message(msg):
    st.markdown(
        f'<div style="text-align: left; background-color:#F1F0F0; padding:8px; '
        f'border-radius:10px; margin:5px 0;">{msg}</div>',
        unsafe_allow_html=True
    )

# --- UI ---
st.title("üéì –ü—ñ–¥–±—ñ—Ä –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ñ–≤")

# 0-–π –ö–†–û–ö: –ú–µ—Ç–∞
if st.session_state.step == 0:
    show_bot_message ("–í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å —Å–µ—Ä–µ–¥ —Å–æ—Ç–µ–Ω—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ Prometheus. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –ó–∞–≤–¥—è–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —è –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é —Ç—ñ –∫—É—Ä—Å–∏, —è–∫—ñ –Ω–∞–π–∫—Ä–∞—â–µ –≤–∞–º –ø—ñ–¥—ñ–π–¥—É—Ç—å. ")
    show_bot_message(" –Ø–∫–∞ –≤–∞—à–∞ –º–µ—Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è?")
    goal = st.radio("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç—É:", answers["goal"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['goal'] = goal
        st.session_state.step += 1
        st.rerun()

# 1-–π –ö–†–û–ö: –°—Ñ–µ—Ä–∞ / –ö–∞—Ç–µ–≥–æ—Ä—ñ—è
elif st.session_state.step == 1:
    show_user_message(f"–ú–æ—è –º–µ—Ç–∞: {st.session_state.data.get('goal', '')}")
    show_bot_message("–£ —è–∫—ñ–π —Å—Ñ–µ—Ä—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–≤—á–∞—Ç–∏—Å—è?")
    category = st.radio("–û–±–µ—Ä—ñ—Ç—å —Å—Ñ–µ—Ä—É:", answers["field"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['category'] = category
        st.session_state.step += 1
        st.rerun()

# 2-–π –ö–†–û–ö: –ë–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è
elif st.session_state.step == 2:
    show_user_message(f"–°—Ñ–µ—Ä–∞: {st.session_state.data.get('category', '')}")
    show_bot_message("–ß–∏ –º–∞—î—Ç–µ –±–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è –∑ —Ü—ñ—î—ó —Ç–µ–º–∏, —á–∏ –±–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ –Ω—É–ª—è?")
    basic_knowledge = st.radio("–û–±–µ—Ä—ñ—Ç—å:", answers["basic_knowledge"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['basic_knowledge'] = basic_knowledge
        st.session_state.step += 1
        st.rerun()

# 3-–π –ö–†–û–ö: –†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
elif st.session_state.step == 3:
    show_user_message(f"–ë–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è: {st.session_state.data.get('basic_knowledge','')}")
    show_bot_message("–Ø–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å?")
    level = st.radio("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å:", answers["level"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['level'] = level
        st.session_state.step += 1
        st.rerun()

# 4-–π –ö–†–û–ö: –§–æ—Ä–º–∞—Ç –ø–æ–¥–∞—á—ñ
elif st.session_state.step == 4:
    show_user_message(f"–†—ñ–≤–µ–Ω—å: {st.session_state.data.get('level','')}")
    show_bot_message("–Ø–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–∞—á—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—É –≤–∞–º –±—ñ–ª—å—à–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å?")
    material_format = st.radio("–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç:", answers["material_format"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['material_format'] = material_format
        st.session_state.step += 1
        st.rerun()

# 5-–π –ö–†–û–ö: –ß–∞—Å –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è
elif st.session_state.step == 5:
    show_user_message(f"–§–æ—Ä–º–∞—Ç: {st.session_state.data.get('material_format','')}")
    show_bot_message("–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –≥–æ—Ç–æ–≤—ñ –ø—Ä–∏–¥—ñ–ª—è—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—é —â–æ—Ç–∏–∂–Ω—è?")
    time_per_week = st.radio("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", answers["time_per_week"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['time_per_week'] = time_per_week
        st.session_state.step += 1
        st.rerun()

# 6-–π –ö–†–û–ö: –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∫—É—Ä—Å—É
elif st.session_state.step == 6:
    show_user_message(f"–ß–∞—Å –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {st.session_state.data.get('time_per_week','')}")
    show_bot_message("–Ø–∫–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∫—É—Ä—Å—É –≤–∞–º –±–ª–∏–∂—á–∞?")
    course_duration = st.radio("–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:", answers["course_duration"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['course_duration'] = course_duration
        st.session_state.step += 1
        st.rerun()

# 7-–π –ö–†–û–ö: –ü—ñ–¥—Ö—ñ–¥ –¥–æ –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è
elif st.session_state.step == 7:
    show_user_message(f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {st.session_state.data.get('course_duration','')}")
    show_bot_message("–Ø–∫–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è –≤–∞–º –±—É–¥–µ –∑—Ä—É—á–Ω—ñ—à–∏–π?")
    teaching_approach = st.radio("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ö—ñ–¥:", answers["teaching_approach"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['teaching_approach'] = teaching_approach
        st.session_state.step += 1
        st.rerun()

# 8-–π –ö–†–û–ö: –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç
elif st.session_state.step == 8:
    show_user_message(f"–ü—ñ–¥—Ö—ñ–¥: {st.session_state.data.get('teaching_approach','')}")
    show_bot_message("–ß–∏ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –≤–∞—Å —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –∫—É—Ä—Å—É?")
    certificate = st.radio("–û–±–µ—Ä—ñ—Ç—å:", answers["certificate"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['certificate'] = certificate
        st.session_state.step += 1
        st.rerun()

# 9-–π –ö–†–û–ö: –ü–ª–∞—Ç–Ω—ñ –∫—É—Ä—Å–∏
elif st.session_state.step == 9:
    show_user_message(f"–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç: {st.session_state.data.get('certificate','')}")
    show_bot_message("–ß–∏ –º–æ–∂–Ω–∞ –≤–∞–º –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–ª–∞—Ç–Ω—ñ –∫—É—Ä—Å–∏?")
    paid_courses = st.radio("–û–±–µ—Ä—ñ—Ç—å:", answers["paid_courses"])
    if st.button("–î–∞–ª—ñ"):
        st.session_state.data['paid_courses'] = paid_courses
        st.session_state.step += 1
        st.rerun()



# ‚Ä¶ (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫—Ä–æ–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)

elif st.session_state.step == 10:
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∂–µ –∑—ñ–±—Ä–∞–Ω–∞
    if 'category' not in st.session_state.data:
        st.error("‚ö†Ô∏è –¢—Ä–∞–ø–∏–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
        st.stop()

    show_user_message(f"–ü–ª–∞—Ç–Ω—ñ –∫—É—Ä—Å–∏: {st.session_state.data.get('paid_courses','')}")
    show_bot_message("–î–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –æ–±–µ—Ä—ñ—Ç—å —Ü—ñ–∫–∞–≤—ñ –≤–∞–º —Ç–µ–º–∏ (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):")
    subcats = categories.get(st.session_state.data['category'], [])
    selected_subcats = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", options=subcats)

    # –Ñ–¥–∏–Ω–∞ –∫–Ω–æ–ø–∫–∞ ‚Äú–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å–∏‚Äù (–∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º key)
    show_courses_btn = st.button("–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å–∏", key="show_courses")
    if show_courses_btn:
        if not selected_subcats:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
            st.stop()
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –ø–æ—à—É–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ
        st.session_state.data['subcategory'] = selected_subcats
        st.session_state.data['search_done'] = True
        st.session_state.data['gpt_requested'] = False
        st.rerun()

    # –Ø–∫—â–æ –ø–æ—à—É–∫ —â–µ –Ω–µ –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ, —á–µ–∫–∞—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    if not st.session_state.data.get('search_done', False):
        st.stop()

    # --------------------------------------
    # –î–∞–ª—ñ: –º–∏ –≤ —Å—Ç–∞–Ω—ñ search_done == True
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –æ–±—Ä–∞–Ω—ñ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —ñ –≤–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –∫—É—Ä—Å—ñ–≤
    # --------------------------------------
    show_user_message(f"–û–±—Ä–∞–Ω—ñ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {', '.join(st.session_state.data['subcategory'])}")
    show_bot_message("üîé –®—É–∫–∞—î–º–æ –∫—É—Ä—Å–∏ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏...")

    # –í–∏–∫–æ–Ω—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∫—É—Ä—Å—ñ–≤ (–≥–Ω—É—á–∫–∞ –ª–æ–≥—ñ–∫–∞, —ñ–≥–Ω–æ—Ä—É—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è)
    results = []
    for c in courses:
        # 1) –§—ñ–ª—å—Ç—Ä –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é (–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
        if c.get('category') != st.session_state.data['category']:
            continue

        # 2) –†—ñ–≤–µ–Ω—å (—è–∫—â–æ —É –∫—É—Ä—Å—ñ —î –ø–æ–ª–µ 'level')
        course_levels = c.get('level')
        if course_levels:
            if isinstance(course_levels, str):
                course_levels = [course_levels]
            if st.session_state.data['level'] not in course_levels:
                continue

        # 3) –ü–ª–∞—Ç–Ω—ñ—Å—Ç—å (—è–∫—â–æ —î –ø–æ–ª–µ 'price')
        course_price = c.get('price')
        if course_price:
            if st.session_state.data['paid_courses'] == "–ù—ñ" and course_price != "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ":
                continue

        # 4) –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç (—è–∫—â–æ —î –ø–æ–ª–µ 'certificate')
        course_cert = c.get('certificate')
        cert_req = st.session_state.data['certificate']
        if cert_req != "–ù–µ–≤–∞–∂–ª–∏–≤–æ" and course_cert:
            if course_cert != cert_req:
                continue

        # 5) –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (—è–∫—â–æ —î –ø–æ–ª–µ 'subcategory')
        course_subcats = c.get('subcategory')
        if course_subcats:
            if isinstance(course_subcats, str):
                course_subcats = [course_subcats]
            if not any(sub in course_subcats for sub in st.session_state.data['subcategory']):
                continue

        # 6) –ú–µ—Ç–∞ (—è–∫—â–æ —î –ø–æ–ª–µ 'goal')
        course_goals = c.get('goal')
        if course_goals:
            if isinstance(course_goals, str):
                course_goals = [course_goals]
            if st.session_state.data['goal'] not in course_goals:
                continue

        course_duration = c.get('duration')
        if course_duration == "–ö–æ—Ä–æ—Ç–∫—ñ –∫—É—Ä—Å–∏ (1-2 —Ç–∏–∂–Ω—ñ)":
        # 1-2 —Ç–∏–∂–Ω—ñ = 7-14 –¥–Ω—ñ–≤
            filtered_courses = [c for c in filtered_courses if 7 <= c["duration"] <= 14]

        elif course_duration == "–î–æ–≤–≥—ñ –∫—É—Ä—Å–∏ (–ø–æ–Ω–∞–¥ 2 —Ç–∏–∂–Ω—ñ)":
             filtered_courses = [c for c in filtered_courses if c["duration"] > 14]

        elif course_duration == "–®–≤–∏–¥–∫—ñ –∫—É—Ä—Å–∏ (–¥–æ 5 –¥–Ω—ñ–≤)":
            filtered_courses = [c for c in filtered_courses if c["duration"] <= 5]

        # –Ø–∫—â–æ –∫—É—Ä—Å –ø—Ä–æ–π—à–æ–≤ —É—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ‚Äî –¥–æ–¥–∞—î–º–æ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        results.append(c)

    if not results:
        st.warning("üòî –ù–∞ –∂–∞–ª—å, –∫—É—Ä—Å—ñ–≤ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        st.stop()

    # –í–∏–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 5 –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤
    for idx, course in enumerate(results[:5], 1):
        st.markdown(f"**{idx}. [{course['title']}]({course['url']})**")
        st.write(course['description'])
        lvls = course.get('level') or []
        if isinstance(lvls, str):
            lvls = [lvls]
        st.write(f"–†—ñ–≤–µ–Ω—å: {', '.join(lvls)} | –¶—ñ–Ω–∞: {course.get('price','–ù–µ–≤—ñ–¥–æ–º–æ')} | –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç: {course.get('certificate','–ù–µ–º–∞—î')}")

    # –¢–µ–ø–µ—Ä –≤–∏–∫–ª–∏–∫–∞—î–º–æ GPT –ª–∏—à–µ –∫–æ–ª–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É  
    if not st.session_state.data.get('gpt_requested', False):
        if st.button("üß† –ü–æ—è—Å–Ω–∏—Ç–∏ –≤—ñ–¥ GPT", key="explain_gpt"):
            st.session_state.data['gpt_requested'] = True

            # –§–æ—Ä–º—É—î–º–æ prompt —ñ–∑ –ø–µ—Ä—à–∏—Ö —Ç—Ä—å–æ—Ö –∫—É—Ä—Å—ñ–≤ –¥–ª—è GPT
            prompt = (
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –∫—É—Ä—Å–∏ –¥–ª—è –º–µ—Ç–∏ '{st.session_state.data['goal']}', "
                f"—Ä—ñ–≤–µ–Ω—å '{st.session_state.data['level']}', "
                f"–∫–∞—Ç–µ–≥–æ—Ä—ñ—è '{st.session_state.data['category']}', "
                f"–ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {', '.join(st.session_state.data['subcategory'])}.\n"
                f"–û—Å—å –∑–Ω–∞–π–¥–µ–Ω—ñ –∫—É—Ä—Å–∏:\n"
            )
            for c in results[:3]:
                prompt += f"- {c['title']}: {c['description']}\n"
            prompt += "–ü–æ—è—Å–Ω–∏, —á–æ–º—É —Ü—ñ –∫—É—Ä—Å–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."

            try:
                response = openai.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=300
                )
               
                gpt_text = response.choices[0].message.content

                st.session_state.data['gpt_response'] = gpt_text

            except RateLimitError:
             st.session_state.data['gpt_response'] = (
             "–ù–∞ –∂–∞–ª—å, –ø–æ—è—Å–Ω–µ–Ω–Ω—è GPT –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–≤–æ—Ç–∏. "
             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
                    )
            except AuthenticationError:
             st.session_state.data['gpt_response'] = (
            "–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∞—à API-–∫–ª—é—á –¥—ñ–π—Å–Ω–∏–π."
                    )
            except Exception as e:
             st.session_state.data['gpt_response'] = (
        f"–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ GPT: {e}"
                    )

            st.rerun()
        else:
            st.stop()

    # –Ø–∫—â–æ –º–∏ –≤–∂–µ —Å—é–¥–∏ –¥—ñ–π—à–ª–∏ ‚Äî 'gpt_requested' == True, —Ç–æ–º—É –≤–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT:
    show_bot_message("–û—Å—å –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥ GPT:")
    st.markdown(st.session_state.data.get('gpt_response', "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è."))
  
  



